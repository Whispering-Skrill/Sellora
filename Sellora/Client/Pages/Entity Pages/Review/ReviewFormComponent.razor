@*ASPNetr-yanWorks*@
@inject HttpClient _client

<!-- EditForm for managing review details -->
<EditForm Model="@review" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Fieldset to disable form controls if Disabled is true -->
    <fieldset disabled="@Disabled">

        <!-- Title of Review -->
        <div class="form-group">
            <label>Title of Review: </label>
            <div>
                <InputText @bind-Value="@review.ReviewTitle" class="form-control" />
                <ValidationMessage For="@(() => review.ReviewTitle)" />
            </div>
        </div>

        <!-- Review rating -->
        <div class="form-group">
            <label>Rating: </label>
            <div>
                <InputNumber @bind-Value="@review.ReviewRating" class="form-control" />
                <ValidationMessage For="@(() => review.ReviewRating)" />
            </div>
        </div>

        <!-- Description of the review (textarea) -->
        <div class="form-group">
            <label>Describe your Experience: </label>
            <div>
                <textarea @bind="@review.ReviewDescription" class="form-control" id="exampleFormControlTextarea1" rows="4"></textarea>
                <ValidationMessage For="@(() => review.ReviewDescription)" />
            </div>
        </div>

        <!-- Date of the review ((visible only if editing an existing review) -->
        @if (review.Id > 0)
        {
            <div class="form-group">
                <label>Date of Review: </label>
                <div>
                    <InputDate @bind-Value="@review.ReviewDate" class="form-control" />
                    <ValidationMessage For="@(() => review.ReviewDate)" />
                </div>
            </div>
        }

        <!-- Reviewer (AppUser) selection -->
        <div class="form-group">
            <label>Reviewer: </label>
            <div>
                <InputSelect @bind-Value="@review.AppUserID" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (AppUsers != null)
                    {
                        foreach (var appuser in AppUsers)
                        {
                            <option value="@appuser.Id">ID: @appuser.Id ( @appuser.UserName )</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => review.AppUserID)" />
            </div>
        </div>

        <!-- Swap Transaction selection -->
        <div class="form-group">
            <label>Swap Transaction: </label>
            <div>
                <InputSelect @bind-Value="review.SwapTransactionID" class="form-control">
                    <option value="">-- Select Swap Transaction --</option>
                    @if (SwapTransactions != null)
                    {
                        foreach (var swaptransaction in SwapTransactions)
                        {
                            if (swaptransaction.AppUser1Id == review.AppUserID || swaptransaction.AppUser2Id == review.AppUserID)
                            {
                                <option value="@swaptransaction.Id">Swap Transaction: @swaptransaction.Id</option>
                            }
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => review.SwapTransactionID)" />
            </div>
        </div>

        <!-- Sale Transaction selection -->
        <div class="form-group">
            <label>Sale Transaction: </label>
            <div>
                <InputSelect @bind-Value="review.SaleTransactionID" class="form-control">
                    <option value="">-- Select Sale Transaction --</option>
                    @if (SaleTransactions != null)
                    {
                        foreach (var saletransaction in SaleTransactions)
                        {
                            if (saletransaction.AppUserId == review.AppUserID)
                            {
                                <option value="@saletransaction.Id">Swap Transaction: @saletransaction.Id</option>
                            }
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => review.SaleTransactionID)" />
            </div>
        </div>
    </fieldset>

    <br />

    <!-- Submit button (visible only if the form is not disabled) -->
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
</EditForm>

@code {
    // Parameters for the component
    [Parameter] public bool Disabled { get; set; } = false;         // Determines whether form controls should be disabled
    [Parameter] public Review ? review { get; set; }                // This parameters store the review details
    [Parameter] public string ButtonText { get; set; } = "Save";    // This sets up what the button does
    [Parameter] public EventCallback OnValidSubmit { get; set; }    // EventCallback to handle Form Submission

    // Collections to store data fetched from the server
    private IList<AppUser>? AppUsers;
    private IList<Staff>? Staffs;
    private IList<SwapTransaction>? SwapTransactions;
    private IList<SaleTransaction>? SaleTransactions;

    // This runs asynchronously when the component/page is initialized
    protected async override Task OnInitializedAsync()
    {
        // This fetches data from Server Endpoints using HttpClient
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AppUsersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        SwapTransactions = await _client.GetFromJsonAsync<List<SwapTransaction>>($"{Endpoints.SwapTransactionsEndpoint}");
        SaleTransactions = await _client.GetFromJsonAsync<List<SaleTransaction>>($"{Endpoints.SaleTransactionsEndpoint}");
    }
}