@*ASPNetr-yanWorks*@
@page "/reviews/"
@implements IDisposable
@inject IJSRuntime js
@inject HttpClient _client
@inject NavigationManager _navManager
@inject HttpInterceptorService _interceptor
@attribute [Authorize]

<!-- Page Title -->
<PageTitle>Reviews</PageTitle>

<!-- Topbar with the title and a button to create a new review -->
<div class="review-topbar">
    <h2 class="review-title">Reviews</h2>
    <a href="/reviews/create" class="btn btn-secondary">
        <span class="oi oi-plus" style="margin-top: 5px;"></span>
    </a>
</div>

<div style="margin-top: 10px;">
    @if (Reviews == null)
    {
        <!-- Displays a loading message if reviews are still loading -->
        <div class="alert alert-info">Loading Reviews...</div>
    }
    else
    {
        <!-- Displays each review in a box -->
        @foreach (var review in Reviews)
        {
            <div class="review-box">
                <!-- Inner container for review details -->
                <div class="review-box-innercontainer1">
                    @if (review.SwapTransaction != null)
                    {
                        foreach (var swaptransaction in SwapTransactions)
                        {
                            if (swaptransaction.Id == review.SwapTransactionID)
                            {
                                <div class="review-box-swaptransaction-container">
                                    <div>
                                        <div class="review-box-itemname-container">
                                            <p>@swaptransaction.SwapItem1.ItemName</p>
                                        </div>
                                        <div class="review-box-itemimage-container">
                                            <img src="@swaptransaction.SwapItem1.ImageUrl" class="card-img-top" style="border-radius:10px; width:100%; height:100%">
                                        </div>
                                        <div class="review-box-username-container">
                                            @swaptransaction.AppUser1.UserName
                                        </div>
                                    </div>
                                    <div class="review-box-swapsymbol-container">
                                        <span class="oi oi-random" style="font-size: 40px;"></span>
                                    </div>
                                    <div>
                                        <div class="review-box-itemname-container">
                                            <p>@swaptransaction.SwapItem2.ItemName</p>
                                        </div>
                                        <div class="review-box-itemimage-container">
                                            <img src="@swaptransaction.SwapItem2.ImageUrl" class="card-img-top" style="border-radius:10px; width:100%; height:100%">
                                        </div>
                                        <div class="review-box-username-container">
                                            @swaptransaction.AppUser2.UserName
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else if (review.SaleTransaction != null)
                    {
                        foreach (var saletransaction in SaleTransactions)
                        {
                            if (saletransaction.Id == review.SaleTransactionID)
                            {
                                <div class="review-box-swaptransaction-container">
                                    <div>
                                        <div class="review-box-itemname-container">
                                            <p>@saletransaction.Item.ItemName</p>
                                        </div>
                                        <div class="review-box-itemimage-container">
                                            <img src="@saletransaction.Item.ImageUrl" class="card-img-top" style="border-radius:10px; width:100%; height:100%">
                                        </div>
                                        <div class="review-box-username-container">
                                            @foreach (var item in Items)
                                            {
                                                if (saletransaction.ItemId == item.Id)
                                                {
                                                    @item.AppUser.UserName
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="review-box-swapsymbol-container">
                                        <span class="oi oi-arrow-thick-right" style="font-size: 50px;"></span>
                                    </div>
                                    <div>
                                        <div class="review-box-itemname-container">
                                            <p>Paid By:</p>
                                        </div>
                                        <div class="review-box-itemimage-container">
                                            <div style="display:flex; justify-content: center; align-items: center; height:100%; min-height:13em;">
                                                <span class="oi oi-dollar" style="font-size: 130px; padding-bottom: 40px; padding-left:20px"></span>
                                            </div>
                                        </div>
                                        <div class="review-box-username-container">
                                            @saletransaction.AppUser.UserName
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <h4 class="review-box-title">TRANSACTION MISSING</h4>
                    }
                </div>
                <div class="review-box-innercontainer2">
                    <p class="review-box-details">Written by: @review.AppUser.UserName ------- @review.ReviewDate.Day / @review.ReviewDate.Month / @review.ReviewDate.Year</p>
                    <p class="review-box-content">@review.ReviewDescription</p>
                </div>

                <!-- Controls for each review box -->
                <div class="review-box-control-container">
                    <div class="review-box-detail-button">
                        <a href="/reviews/view/@review.Id" class="btn btn-primary">
                            More Details
                        </a>
                    </div>

                    <!-- This prevents user-role level users from editing reviews -->
                    <AuthorizeView Roles="Administrator">
                        <div class="review-box-control-bottom">
                            <a href="/reviews/edit/@review.Id" class="btn btn-warning" style="width:100%; margin-right:5px;">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" style="width:100%; margin-left:5px;" @onclick="@(()=>Delete(review.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </div>
                    </AuthorizeView>
                </div>
            </div>
        }
    }
</div>

@code {
    // List to store reviews fetched from the server
    private List<Review>? Reviews;
    private List<SwapTransaction>? SwapTransactions;
    private List<SaleTransaction>? SaleTransactions;
    private List<Item>? Items;

    // This runs asynchronously when the component/page is initialized
    protected async override Task OnInitializedAsync()
    {
        // Initialises the interceptor module
        // This monitors HTTP Events for Global Error Handling
        _interceptor.MonitorEvent();
        
        // This fetches data from Server Endpoints using HttpClient
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        SwapTransactions = await _client.GetFromJsonAsync<List<SwapTransaction>>($"{Endpoints.SwapTransactionsEndpoint}");
        SaleTransactions = await _client.GetFromJsonAsync<List<SaleTransaction>>($"{Endpoints.SaleTransactionsEndpoint}");
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
    }

    // Method to handle review deletion with confirmation dialog
    async Task Delete(int reviewsID)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewsID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete review created by user {review.AppUserID}?");
            if (confirm)
            {
                // Deletes the review and refreshes the list
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewsID}");
                await OnInitializedAsync();
            }
        }
    }

    // Disposes of resources when the component is disposed
    public void Dispose()
    {
        // This disposes of global error handling events
        _interceptor.DisposeEvent();
    }
}
