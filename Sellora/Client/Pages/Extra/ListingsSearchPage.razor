@* This is a Listings Page that allows for a search function to be used *@
@*ASPNetr-yanWorks*@
@page "/listings/"
@implements IDisposable
@inject IJSRuntime js
@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@attribute [Authorize]


<!-- Page Title -->
<PageTitle>Browse Listings</PageTitle>

<head>
    <!--FONT AWESOME-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<!-- Search bar -->
<div class="listingpage-searchbar-section">
    <div class="listingpage-searchbar-container">
        <div class="listingpage-searchbar-searchbar-container">
            <input type="text" @bind="searchQuery" @onkeyup="HandleKeyPress" placeholder="Search..." />
        </div>
        <div class="listingpage-searchbar-button-container">
            <button class="btn btn-primary" style="height:100%; width:100%; border-radius:10px;" @onclick="Search">Search</button>
        </div>
    </div>
</div>

<!-- Listings -->
<div class="listing-section">
    <div class="listing-container">
        @if (DisplayedItems == null)
        {
            <div class="alert alert-info">No matching items found.</div>
        }
        else if (DisplayedItems.Count == 0)
        {
            <div class="alert alert-warning">No items match the current search criteria.</div>
        }
        else
        {
            @foreach (var item in DisplayedItems)
            {
                <div class="listing-box">
                    <a href="/listings/@item.Id" style="text-decoration:none;">
                        <div class="listingitem-inner">
                            <p class="listingitem-username">@item.AppUser.UserName</p>
                            <img src="@item.ImageUrl" class="card-img-top" style="border-radius:10px; width:100%; height:100%">
                            <div class="listingitem-content">
                                <h5 class="listingitem-title">@item.ItemName</h5>
                                @if (item.ItemPrice == 0)
                                {
                                    <p class="listingitem-price">Free</p>
                                }
                                else
                                {
                                    <p class="listingitem-price">$@item.ItemPrice</p>
                                }
                                <p class="listing-condition">@item.Condition</p>
                                <div class="listingitem-likescontainer">
                                    <i class="fa fa-heart-o" style="font-size:20px; margin-left:0.1vh;"></i>
                                    <p style="margin-left:5px; margin-top:-5px; font-size:125%;">@item.ItemLikes</p>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            }
        }
    </div>
</div>

@code {
    // List to store items fetched from the server
    private List<Sellora.Shared.Domain.Item>? Items;
    private List<Sellora.Shared.Domain.Item>? DisplayedItems; // List to store filtered items
    private string searchQuery = "";

    // This runs asynchronously when the component/page is initialized
    protected async override Task OnInitializedAsync()
    {
        // Initialises the interceptor module
        // This monitors HTTP Events for Global Error Handling
        _interceptor.MonitorEvent();

        // This fetches data from Server Endpoints using HttpClient
        Items = await _client.GetFromJsonAsync<List<Sellora.Shared.Domain.Item>>($"{Endpoints.ItemsEndpoint}");

        // This allows for all items to be displayed in the beginning
        DisplayedItems = Items;
    }

    // Disposes of resources when the component is disposed
    public void Dispose()
    {
        // This disposes of global error handling events
        _interceptor.DisposeEvent();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            // Calls the search function when Enter key is pressed
            Search();
        }
    }

    // Search Function
    private void Search()
    {
        if (Items != null)
        {
            // Convert searchQuery to lowercase for better matching
            string query = searchQuery.ToLowerInvariant();

            // Filter items based on the search query
            // The search will go across multiple values e.g. condition and user
            DisplayedItems = Items
                .Where(item =>
                    item.ItemName.ToLowerInvariant().Contains(query) ||
                    item.AppUser.UserName.ToLowerInvariant().Contains(query) ||
                    item.Condition.ToLowerInvariant().Contains(query)
                )
                .ToList();
        }
    }
}
