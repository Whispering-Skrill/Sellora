@*ASPNetr-yanWorks*@
@page "/staffs/edit/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@using Sellora.Client.Components
@attribute [Authorize(Roles = "Administrator")]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<PageTitle>Editing Staff @staff.Id</PageTitle>

<div class="staff-topbar">
    <h2 class="staff-title">Edit Staff with ID: @staff.Id</h2>
    <BackToList Target="staffs" />
</div>

<div style="border-bottom:solid black 1px; padding-top:3px; margin-bottom:10px;">
    @*FOR SPACING*@
</div>

<StaffFormComponent ButtonText="Update" OnValidSubmit="EditStaff" staff="staff"/>

@code {
    // Initialises the id integer for the @page directive
    [Parameter] public int id { get; set; }

    // Creation of Staff object used by the form component
    Staff? staff = new Staff();

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
    }

    // This method activates when all parameters have been set, the function then loads a specific tuple of data by its Id, assigning it to the staff object
    protected async override Task OnParametersSetAsync()
    {
        staff = await _client.GetFromJsonAsync<Staff>($"{Endpoints.StaffsEndpoint}/{id}");
    }

    // This method is activated when the edit is confirmed by the user by clicking a button
    async Task EditStaff()
    {
        // Sends a PUT directive
        await _client.PutAsJsonAsync($"{Endpoints.StaffsEndpoint}/{id}", staff);

        // Redirects user back to staffs page
        _navManager.NavigateTo("/staffs/");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
