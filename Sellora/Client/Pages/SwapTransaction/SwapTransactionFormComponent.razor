@*ASPNetr-yanWorks*@
@inject HttpClient _client

<EditForm Model="@swaptransaction" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        @if (swaptransaction.Id > 0)
        {
            <div class="form-group">
                <label>Date of Transaction: </label>
                <div>
                    <InputDate @bind-Value="@swaptransaction.TransactionDate" class="form-control" />
                    <ValidationMessage For="@(() => swaptransaction.TransactionDate)" />
                </div>
            </div>
        }
        <div class="form-group">
            <label>Transaction User 1: </label>
            <div>
                <InputSelect @bind-Value="swaptransaction.AppUser1Id" class="form-control">
                    <option value="">-- Select User 1 --</option>
                    @if (AppUsers != null)
                    {
                        foreach (var appuser in AppUsers)
                        {
                            <option value="@appuser.Id">ID: @appuser.Id ( @appuser.UserName )</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => swaptransaction.AppUser1Id)" />
            </div>
        </div>
        <div class="form-group">
            <label>Swapped Item 1: </label>
            <div>
                <InputSelect @bind-Value="swaptransaction.SwapItem1Id" class="form-control">
                    <option value="">-- Select Item 1 --</option>
                    @if (Items != null)
                    {
                        foreach (var item in Items)
                        {
                            <option value="@item.Id">ID: @item.Id ( @item.ItemName )</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => swaptransaction.SwapItem1Id)" />
            </div>
        </div>
        <div class="form-group">
            <label>Transaction User 2: </label>
            <div>
                <InputSelect @bind-Value="swaptransaction.AppUser2Id" class="form-control">
                    <option value="">-- Select User 2 --</option>
                    @if (AppUsers != null)
                    {
                        foreach (var appuser in AppUsers)
                        {
                            <option value="@appuser.Id">ID: @appuser.Id ( @appuser.UserName )</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => swaptransaction.AppUser2Id)" />
            </div>
        </div>
        <div class="form-group">
            <label>Swapped Item 2: </label>
            <div>
                <InputSelect @bind-Value="swaptransaction.SwapItem2Id" class="form-control">
                    <option value="">-- Select Item 2 --</option>
                    @if (Items != null)
                    {
                        foreach (var item in Items)
                        {
                            <option value="@item.Id">ID: @item.Id ( @item.ItemName )</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => swaptransaction.SwapItem2Id)" />
            </div>
        </div>
    </fieldset>
    <br />

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public SwapTransaction ? swaptransaction { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<AppUser>? AppUsers;
    private IList<Staff>? Staffs;
    private IList<Item>? Items;

    protected async override Task OnInitializedAsync()
    {
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AppUsersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
    }
}
