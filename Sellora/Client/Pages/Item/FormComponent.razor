@inject HttpClient _client

<EditForm Model="@item" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

 <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Add Pictures: </label>
        <div>
            <InputFile multiple="true" OnChange="HandleFileChange" />
            <button type="button" class="btn btn-secondary" @onclick="UploadPictures">Upload</button>
            <br>
            <!-- Display the uploaded images -->
            <div id="image-preview-container"></div>
        </div>
    </div>
    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@item.ItemName" class="form-control" />
            <ValidationMessage For="@(() => item.ItemName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Price: </label>
        <div>
            <InputNumber @bind-Value="@item.ItemPrice" class="form-control" />
            <ValidationMessage For="@(() => item.ItemPrice)" />
        </div>
    </div>

    <div class="form-group">
        <label>Item Condition: </label>
        <div>
            <InputText @bind-Value="@item.Condition" class="form-control" />
            <ValidationMessage For="@(() => item.Condition)" />
        </div>
    </div>

    <div class="form-group">
        <label>Upload Date: </label>
        <div>
            <InputDate @bind-Value="@item.ItemDate" class="form-control" />
            <ValidationMessage For="@(() => item.ItemDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>Item Description: </label>
        <div>
            <InputText @bind-Value="@item.ItemDescription" class="form-control" />
            <ValidationMessage For="@(() => item.ItemDescription)" />
        </div>
    </div>

    <div class="form-group">
        <label>Item Location: </label>
        <div>
            <InputText @bind-Value="@item.ItemLocation" class="form-control" />
            <ValidationMessage For="@(() => item.ItemLocation)" />
        </div>
    </div>

    <div class="form-group">
        <label>Category: </label>
        <div>
            <InputSelect @bind-Value="item.CategoryId" class="form-control">
                <option value="">-- Select Category --</option>
                @if (Categories != null)
                {
                    foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.CategoryName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => item.CategoryId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Uploaded By: </label>
        <div>
            <InputSelect @bind-Value="item.AppUserId" class="form-control">
                <option value="">-- Select UserName --</option>
                @if (AppUsers != null)
                {
                    foreach (var appUser in AppUsers)
                    {
                        <option value="@appUser.Id">@appUser.UserName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => item.AppUserId)" />
        </div>
    </div>

    <br />
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Item? item { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Category> Categories;
    private IList<AppUser> AppUsers;

    protected async override Task OnInitializedAsync()
    {
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AppUsersEndpoint}");
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }

    private List<string> uploadedImages = new List<string>();

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            var imageUrl = await PreviewImage(file);
            uploadedImages.Add(imageUrl);
        }
        StateHasChanged();
    }

    private async Task<string> PreviewImage(IBrowserFile file)
    {
        // Handle the file, e.g., upload to server or preview locally
        // For simplicity, we'll just read the file and create a data URL for preview
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var base64 = Convert.ToBase64String(buffer);
        return $"data:{file.ContentType};base64,{base64}";
    }

    private void UploadPictures()
    {
        // Implement the logic to upload the images to the server
        // You can use the uploadedImages list to get the selected images
        // and send them to the server using HttpClient or another method
        // For demonstration purposes, we're just printing the image URLs
        foreach (var imageUrl in uploadedImages)
        {
            Console.WriteLine(imageUrl);
        }
    }
}
