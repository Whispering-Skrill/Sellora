// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sellora.Server.Data;

#nullable disable

namespace Sellora.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "595b2485-3bfa-4b70-9209-7526bdb84f37",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "b1675205-1948-44ec-8b55-b0cb71d1f84e",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sellora.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserLastOnline")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UserRegDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77625ae6-5f4d-47aa-a99d-5e6486695c6d",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGmX/t2JfEtf8EoKiLbMM+ywhpJuQFogs27Tfh7YAPobK21NBx5fJPu5uNznbmZ4qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c877af26-22a8-45e1-97ff-80385ae9f00d",
                            TwoFactorEnabled = false,
                            UserFirstName = "Admin",
                            UserLastName = "User",
                            UserLastOnline = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1468),
                            UserName = "Admin",
                            UserRegDate = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1467)
                        },
                        new
                        {
                            Id = "b1675205-1948-44ec-8b55-b0cb71d1f84e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99e3af74-3f4c-4d65-8bc1-5e4f59ba7522",
                            Email = "user@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEC5qHDXfilA/98KepRGGNWF4xAZqg/EeVJ4lw2XAKKWvwNvxXJtm+rhH4jx9M0K32g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "372e85c3-a714-4011-96fe-e77d6750bcdf",
                            TwoFactorEnabled = false,
                            UserFirstName = "User",
                            UserLastName = "User",
                            UserLastOnline = new DateTime(2024, 1, 31, 12, 8, 58, 986, DateTimeKind.Local).AddTicks(5376),
                            UserName = "user",
                            UserRegDate = new DateTime(2024, 1, 31, 12, 8, 58, 986, DateTimeKind.Local).AddTicks(5366)
                        });
                });

            modelBuilder.Entity("Sellora.Shared.Domain.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserHPNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UserLastOnline")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserRegDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserDescription = "Passionate about all things digital and SEO wizardry 🚀 | Helping businesses climb the search engine ranks 📈 | Coffee enthusiast ☕ | Explorer of new tech and trends 🌐 | #SEOExpert #DigitalMarketing",
                            UserEmail = "sy123@gmail.com",
                            UserFirstName = "Seo",
                            UserHPNum = "88123123",
                            UserLastName = "Yeong",
                            UserLastOnline = new DateTime(2024, 1, 31, 12, 8, 59, 123, DateTimeKind.Local).AddTicks(5941),
                            UserName = "SeoCoolSeoYeong",
                            UserPassword = "AQAAAAIAAYagAAAAEAdKXw/kr22iMAHTwbkPl3V6I9Qx240SroL1BZqPsD4qT3gpH663QK3aKqJ8XDJToQ==",
                            UserRegDate = new DateTime(2024, 1, 31, 12, 8, 59, 123, DateTimeKind.Local).AddTicks(5928)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserDescription = "Creative soul navigating the digital realm 🌟 | Graphic designer by day, dreamer by night ✨ | Turning ideas into visual wonders 🎨 | Coffee addict ☕ | Embracing the beauty of design and storytelling 🖌️ | #GraphicDesigner #Dreamer",
                            UserEmail = "tt123@gmail.com",
                            UserFirstName = "Tina",
                            UserHPNum = "88445566",
                            UserLastName = "Tan",
                            UserLastOnline = new DateTime(2024, 1, 31, 12, 8, 59, 196, DateTimeKind.Local).AddTicks(3427),
                            UserName = "TT_4Me",
                            UserPassword = "AQAAAAIAAYagAAAAEOfHJynhB+ZIQykf+wD4DRDqVYfmLm7dE/VPzgxTSde80+wMWKHBs8ddtyM+zhT8nA==",
                            UserRegDate = new DateTime(2024, 1, 31, 12, 8, 59, 196, DateTimeKind.Local).AddTicks(3414)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserDescription = "Adventurous spirit with a flair for tech and innovation 🚀 | Coding maestro by day, gaming wizard by night 🎮 | Constantly exploring the digital frontier 💻 | Fuelled by curiosity and a love for challenges 🌐 | Living life one line of code at a time! #TechExplorer #GamingEnthusiast",
                            UserEmail = "kl23@gmail.com",
                            UserFirstName = "Kaynan",
                            UserHPNum = "85445666",
                            UserLastName = "Loh",
                            UserLastOnline = new DateTime(2024, 1, 31, 12, 8, 59, 264, DateTimeKind.Local).AddTicks(9042),
                            UserName = "Kay_today",
                            UserPassword = "AQAAAAIAAYagAAAAECxePtAhqLl2/T48zK/qqHT9JFhikoizonpV4A8KZQiQlL76ieZGLq/t27mPGJzVaA==",
                            UserRegDate = new DateTime(2024, 1, 31, 12, 8, 59, 264, DateTimeKind.Local).AddTicks(9025)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserDescription = "Passionate about coding adventures and tech wonders 🌟 | Coffee-fueled developer by day, gaming enthusiast by night 🎮 | Embracing challenges and turning ideas into reality 💡 | #CodeExplorer #TechEnthusiast",
                            UserEmail = "alex.smith@example.com",
                            UserFirstName = "Alex",
                            UserHPNum = "9876543210",
                            UserLastName = "Smith",
                            UserLastOnline = new DateTime(2024, 1, 31, 12, 8, 59, 333, DateTimeKind.Local).AddTicks(624),
                            UserName = "AdventureCoder",
                            UserPassword = "AQAAAAIAAYagAAAAEMjX+6+XjsNxPwq5zcrg6e/PFTmeH6XVWXRS6A7zA2F0ktPlbLUZH1Q5d2LWCibY4Q==",
                            UserRegDate = new DateTime(2024, 1, 31, 12, 8, 59, 333, DateTimeKind.Local).AddTicks(614)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserDescription = "Digital nomad exploring the virtual realms 🌍 | Coding on-the-go and crafting unique digital experiences ✨ | Passionate about connecting through technology 🚀 | #DigitalNomad #CodeExplorer",
                            UserEmail = "emma.johnson@example.com",
                            UserFirstName = "Emma",
                            UserHPNum = "8765432109",
                            UserLastName = "Johnson",
                            UserLastOnline = new DateTime(2024, 1, 31, 12, 8, 59, 401, DateTimeKind.Local).AddTicks(3446),
                            UserName = "DigitalNomad21",
                            UserPassword = "AQAAAAIAAYagAAAAEE1b809Gxm/SboLU8Chub7GPwPNfOMzEAsADlEfSPyqxWgXeya/Mk+9aTRD7OK6HsQ==",
                            UserRegDate = new DateTime(2024, 1, 31, 12, 8, 59, 401, DateTimeKind.Local).AddTicks(3435)
                        });
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Cars",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1092),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1094),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Services",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1096),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1098),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Property",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1113),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1113),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Electronics",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1115),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1115),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Fashion",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1116),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1116),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Luxury",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1118),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1118),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Toys & Hobbies",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1119),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1120),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Games & Gaming",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1121),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1121),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Home Living",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1122),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1123),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Appliances",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1124),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1124),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Parenthood",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1125),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1126),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Health & Food",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1129),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1129),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Sports",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1130),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1131),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Pet Supplies",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1132),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1132),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Jobs",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1133),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1134),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "Other Items",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1135),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(1135),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemClicks")
                        .HasColumnType("int");

                    b.Property<DateTime>("ItemDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ItemLikes")
                        .HasColumnType("int");

                    b.Property<string>("ItemLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemPrice")
                        .HasColumnType("int");

                    b.Property<int>("ItemStatus")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SaleTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<int?>("SwapTransactionID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserID");

                    b.HasIndex("SaleTransactionID");

                    b.HasIndex("StaffID");

                    b.HasIndex("SwapTransactionID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReviewRating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SaleTransactionID")
                        .HasColumnType("int");

                    b.Property<int?>("SwapTransactionID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserID");

                    b.HasIndex("SaleTransactionID");

                    b.HasIndex("SwapTransactionID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.SaleTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ItemId");

                    b.ToTable("SaleTransactions");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffDepartment")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StaffEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StaffHPNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StaffHireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StaffPosition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(382),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(383),
                            StaffAddress = "Temasek Polytechnic",
                            StaffDepartment = "Full Stack Development",
                            StaffEmail = "2102197G@student.tp.edu.sg",
                            StaffFirstName = "Ryan",
                            StaffHPNum = "99991111",
                            StaffHireDate = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(379),
                            StaffLastName = "Chong",
                            StaffPosition = "Lead Developer",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(387),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(388),
                            StaffAddress = "Temasek Polytechnic",
                            StaffDepartment = "Full Stack Development",
                            StaffEmail = "2203567i@student.tp.edu.sg",
                            StaffFirstName = "Lucas",
                            StaffHPNum = "99992222",
                            StaffHireDate = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(386),
                            StaffLastName = "Do",
                            StaffPosition = "Lead Developer",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(391),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(391),
                            StaffAddress = "Design Avenue",
                            StaffDepartment = "User Experience Design",
                            StaffEmail = "emily.ng@example.com",
                            StaffFirstName = "Emily",
                            StaffHPNum = "88882222",
                            StaffHireDate = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(390),
                            StaffLastName = "Ng",
                            StaffPosition = "Senior UI/UX Designer",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(394),
                            DateUpdated = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(394),
                            StaffAddress = "Data Center Lane",
                            StaffDepartment = "Database Management",
                            StaffEmail = "daniel.liu@example.com",
                            StaffFirstName = "Daniel",
                            StaffHPNum = "77773333",
                            StaffHireDate = new DateTime(2024, 1, 31, 12, 8, 58, 918, DateTimeKind.Local).AddTicks(393),
                            StaffLastName = "Liu",
                            StaffPosition = "Database Administrator",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Sellora.Shared.Domain.SwapTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUser1Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("AppUser2Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SwapItem1Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SwapItem2Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUser1Id");

                    b.HasIndex("AppUser2Id");

                    b.HasIndex("SwapItem1Id");

                    b.HasIndex("SwapItem2Id");

                    b.ToTable("SwapTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sellora.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sellora.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sellora.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Item", b =>
                {
                    b.HasOne("Sellora.Shared.Domain.AppUser", "AppUser")
                        .WithMany("Items")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Shared.Domain.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Report", b =>
                {
                    b.HasOne("Sellora.Shared.Domain.AppUser", "AppUser")
                        .WithMany("Reports")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Shared.Domain.SaleTransaction", "SaleTransaction")
                        .WithMany()
                        .HasForeignKey("SaleTransactionID");

                    b.HasOne("Sellora.Shared.Domain.Staff", "Staff")
                        .WithMany("Reports")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Shared.Domain.SwapTransaction", "SwapTransaction")
                        .WithMany()
                        .HasForeignKey("SwapTransactionID");

                    b.Navigation("AppUser");

                    b.Navigation("SaleTransaction");

                    b.Navigation("Staff");

                    b.Navigation("SwapTransaction");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Review", b =>
                {
                    b.HasOne("Sellora.Shared.Domain.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Shared.Domain.SaleTransaction", "SaleTransaction")
                        .WithMany()
                        .HasForeignKey("SaleTransactionID");

                    b.HasOne("Sellora.Shared.Domain.SwapTransaction", "SwapTransaction")
                        .WithMany()
                        .HasForeignKey("SwapTransactionID");

                    b.Navigation("AppUser");

                    b.Navigation("SaleTransaction");

                    b.Navigation("SwapTransaction");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.SaleTransaction", b =>
                {
                    b.HasOne("Sellora.Shared.Domain.AppUser", "AppUser")
                        .WithMany("SaleTransactions")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Sellora.Shared.Domain.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("AppUser");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.SwapTransaction", b =>
                {
                    b.HasOne("Sellora.Shared.Domain.AppUser", "AppUser1")
                        .WithMany()
                        .HasForeignKey("AppUser1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Shared.Domain.AppUser", "AppUser2")
                        .WithMany()
                        .HasForeignKey("AppUser2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Shared.Domain.Item", "SwapItem1")
                        .WithMany()
                        .HasForeignKey("SwapItem1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sellora.Shared.Domain.Item", "SwapItem2")
                        .WithMany()
                        .HasForeignKey("SwapItem2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser1");

                    b.Navigation("AppUser2");

                    b.Navigation("SwapItem1");

                    b.Navigation("SwapItem2");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.AppUser", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("SaleTransactions");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Sellora.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
